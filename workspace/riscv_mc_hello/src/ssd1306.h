
//
// ssd1306 led driver registers setting
// used for small AdaFruit 128x32 oled for Raspi HAT -> driven via I2C
// Details see : https://learn.adafruit.com/adafruit-pioled-128x32-mini-oled-for-raspberry-pi
//
// (c) 2024 Jay Fox
// MIT Open source
// github : https://github.com/javos65
//

#define SSD1306_ADR 0x3c
#define SSD1306_H 32 // height
#define SSD1306_W 128 // width
#define SSD1306_D 512 // full screen data = 128*32 / 8 = 512 bytes
#define SSD1306_BLACK 0   ///< Draw 'off' pixels
#define SSD1306_WHITE 1   ///< Draw 'on' pixels
#define SSD1306_INVERSE 2 ///< Invert pixels

#define SSD1306_MEMORYMODE 0x20          ///< See datasheet
#define SSD1306_COLUMNADDR 0x21          ///< See datasheet
#define SSD1306_PAGEADDR 0x22            ///< See datasheet
#define SSD1306_SETCONTRAST 0x81         ///< See datasheet
#define SSD1306_CHARGEPUMP 0x8D          ///< See datasheet
#define SSD1306_SEGREMAP 0xA0            ///< See datasheet
#define SSD1306_DISPLAYALLON_RESUME 0xA4 ///< See datasheet
#define SSD1306_DISPLAYALLON 0xA5        ///< Not currently used
#define SSD1306_NORMALDISPLAY 0xA6       ///< See datasheet
#define SSD1306_INVERTDISPLAY 0xA7       ///< See datasheet
#define SSD1306_SETMULTIPLEX 0xA8        ///< See datasheet
#define SSD1306_DISPLAYOFF 0xAE          ///< See datasheet
#define SSD1306_DISPLAYON 0xAF           ///< See datasheet
#define SSD1306_COMSCANINC 0xC0          ///< Not currently used
#define SSD1306_COMSCANDEC 0xC8          ///< See datasheet
#define SSD1306_SETDISPLAYOFFSET 0xD3    ///< See datasheet
#define SSD1306_SETDISPLAYCLOCKDIV 0xD5  ///< See datasheet
#define SSD1306_SETPRECHARGE 0xD9        ///< See datasheet
#define SSD1306_SETCOMPINS 0xDA          ///< See datasheet
#define SSD1306_SETVCOMDETECT 0xDB       ///< See datasheet

#define SSD1306_SETLOWCOLUMN 0x00  ///< Not currently used
#define SSD1306_SETHIGHCOLUMN 0x10 ///< Not currently used
#define SSD1306_SETSTARTLINE 0x40  ///< See datasheet

#define SSD1306_EXTERNALVCC 0x01  ///< External display voltage source
#define SSD1306_SWITCHCAPVCC 0x02 ///< Gen. display voltage from 3.3V

#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26              ///< Init rt scroll
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27               ///< Init left scroll
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29 ///< Init diag scroll
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A  ///< Init diag scroll
#define SSD1306_DEACTIVATE_SCROLL 0x2E                    ///< Stop scroll
#define SSD1306_ACTIVATE_SCROLL 0x2F                      ///< Start scroll
#define SSD1306_SET_VERTICAL_SCROLL_AREA 0xA3             ///< Set scroll range


// Command arrays

static uint8_t oled_on[3]={0x00, SSD1306_DISPLAYALLON_RESUME,SSD1306_DISPLAYON};
static uint8_t oled_off[2]={0x00, SSD1306_DISPLAYOFF};
static uint8_t oled_normal[2]={0x00, SSD1306_NORMALDISPLAY};
static uint8_t oled_inverse[2]={0x00, SSD1306_INVERTDISPLAY};

static uint8_t oled_init[27]={
0x00,
SSD1306_DISPLAYOFF,
SSD1306_SETDISPLAYCLOCKDIV,0x80,
SSD1306_SETMULTIPLEX,31, 				// HEIGHT -1
SSD1306_SETDISPLAYOFFSET,0x00,
SSD1306_SETSTARTLINE | 0x00, 			// line #0
SSD1306_CHARGEPUMP,0x14, 				// charge pump 0x10 - intern or 0x14 - extern
SSD1306_MEMORYMODE,0x00,
SSD1306_SEGREMAP | 0x1, 				// Segremap #01
SSD1306_COMSCANDEC,
SSD1306_SETCOMPINS,0x02,  				// 128x32 specific
SSD1306_SETCONTRAST,0x4F,  				// 128x32 specific
SSD1306_SETPRECHARGE,0xF1, 				// pre-charge 0x22 - intern or 0xF1 - extern
SSD1306_SETVCOMDETECT,0x40,
SSD1306_DISPLAYALLON_RESUME,
SSD1306_NORMALDISPLAY,
SSD1306_DEACTIVATE_SCROLL,
SSD1306_DISPLAYON
};

uint8_t oled_graph[7]={
0x00,
SSD1306_COLUMNADDR,0x00,0x7F,
SSD1306_PAGEADDR,0x00,0xFF
};


// Data arrays

#define LATTICE_HEIGHT 24 // 24 pixels = 3 pages
#define LATTICE_WIDTH 120 // 120 pixels = 120 columns
#define LATTICE_SIZE 181  // half size + 1 -> image send split in two due to limites I2C buffer size of 0xff.

// array size is 360, but max I2c buffer send is 0xff = 256bytes, so split in 2 sets:
// remark: logo is upside down due to physical oled mounting
static uint8_t lattice1[ LATTICE_SIZE]  = {
  0x40,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xaf, 0x57, 0xaf, 0x57, 0xaf, 0xd7, 0xff, 0xaf,
  0x57, 0xaf, 0x57, 0xaf, 0xd7, 0xff, 0xbf, 0x57, 0xaf, 0x57, 0xaf, 0xd7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x7f, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x39, 0x01, 0x01,
  0x81, 0xff, 0xff, 0xff, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0x01, 0x01, 0x03,
  0xff, 0xff, 0x1f, 0x01, 0x01, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x01, 0x01,
  0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x03, 0x01, 0x81};

static uint8_t lattice2[LATTICE_SIZE]  = {
  0x40,
  0xf9, 0xff, 0xff, 0xff, 0xf9, 0x01, 0x01, 0x03, 0x1f, 0x9f, 0x9f, 0x9f, 0x1f, 0x1f, 0x07,
  0x83, 0xc1, 0xe1, 0xf9, 0xff, 0xff, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0x39, 0x01,
  0x01, 0xc1, 0xff, 0xff, 0xff, 0x87, 0x81, 0x81, 0x81, 0x81, 0x81, 0xff, 0x8f, 0x81, 0x81,
  0x81, 0x81, 0x81, 0xf9, 0xdf, 0xab, 0xd5, 0xab, 0xd5, 0xab, 0xfd, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xcf, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xc2, 0xc0, 0xc0, 0xf8,
  0xff, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xc7, 0xe3, 0xe1, 0xf0, 0xf8, 0xfc,
  0xff, 0xc1, 0xc0, 0xc0, 0xfc, 0xff, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xc3, 0xc0, 0xc0, 0xcc,
  0xcf, 0xcf, 0xcf, 0xcf, 0xff, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xc7, 0xc0, 0xc0, 0xc8, 0xcf,
  0xcf, 0xcf, 0xcf, 0xff, 0xff, 0xff, 0xf0, 0xc0, 0xc0, 0xc7, 0xe1, 0xf0, 0xf8, 0xfc, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xc0, 0xc0,
  0xfc, 0xff, 0xff, 0xcf, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfe, 0xdf, 0xc0, 0xc0, 0xc0, 0xc0,
  0xc0, 0xfe, 0xff, 0xd5, 0xea, 0xd5, 0xea, 0xd5, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};


