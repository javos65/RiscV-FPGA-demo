<?xml version="1.0" encoding="utf-8" standalone="no"?>
    <device schemaVersion="1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="CMSIS-SVD.xsd" >
      <vendor>Latticsemi.com</vendor>                                       <!-- device vendor name -->
      <vendorID>Latticesemi</vendorID>                                        <!-- device vendor short name -->
      <name>LFD2NX_40</name>                                        <!-- name of part-->
      <series>LFD2NX</series>                                         <!-- device series the device belongs to -->
      <version>1.0</version>                                          <!-- version of this description, adding CMSIS-SVD 1.1 tags -->
      <description>Mycpu</description>

      <addressUnitBits>8</addressUnitBits>
      <width>32</width>
      <size>32</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <resetMask>0xFFFFFFFF</resetMask>

      <peripherals>
          <peripheral>
          <name>cpu0_inst</name>
          <version>2.5.0</version>
          <baseAddress>0xFFFF0000</baseAddress>
          <groupName>riscv_mc</groupName>
          <description></description>

          <addressBlock>
            <offset>0x0</offset>
            <size>0x00000800</size>
            <usage>registers</usage>
          </addressBlock>

          <registers>
                <!-- PIC_STATUS: Interrupt Status Register -->
            <register>
              <name>PIC_STATUS</name>
              <description>Interrupt Status Register</description>
              <addressOffset>0x0000</addressOffset>
              <size>3</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- status: Interrupt Status -->
                <field>
                  <name>status</name>
                  <description>Interrupt Status</description>
                  <bitRange>[2:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- PIC_ENABLE: Interrupt Enable Register -->
            <register>
              <name>PIC_ENABLE</name>
              <description>Interrupt Enable Register</description>
              <addressOffset>0x0004</addressOffset>
              <size>3</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- enable: Interrupt Enable -->
                <field>
                  <name>enable</name>
                  <description>Interrupt Enable</description>
                  <bitRange>[2:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- PIC_SET: Interrupt Set Register -->
            <register>
              <name>PIC_SET</name>
              <description>Interrupt Set Register</description>
              <addressOffset>0x0008</addressOffset>
              <size>3</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- set: Interrupt Set -->
                <field>
                  <name>set</name>
                  <description>Interrupt Set</description>
                  <bitRange>[2:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- PIC_POL: Interrupt Polarity Register -->
            <register>
              <name>PIC_POL</name>
              <description>Interrupt Polarity Register</description>
              <addressOffset>0x000C</addressOffset>
              <size>3</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- pol: Interrupt Polarity -->
                <field>
                  <name>pol</name>
                  <description>Interrupt Polarity</description>
                  <bitRange>[2:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- TIMER_CNT_L: Timer Counter Lower Register -->
            <register>
              <name>TIMER_CNT_L</name>
              <description>Timer Counter Lower Register</description>
              <addressOffset>0x0400</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- cnt_l: Lower 32 bits of 64-bit timer counter register -->
                <field>
                  <name>cnt_l</name>
                  <description>Lower 32 bits of 64-bit timer counter register</description>
                  <bitRange>[31:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- TIMER_CNT_H: Timer Counter Higher Register -->
            <register>
              <name>TIMER_CNT_H</name>
              <description>Timer Counter Higher Register</description>
              <addressOffset>0x0404</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- cnt_h: Higher 32 bits of 64-bit timer counter register -->
                <field>
                  <name>cnt_h</name>
                  <description>Higher 32 bits of 64-bit timer counter register</description>
                  <bitRange>[31:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- TIMER_CMP_L: Timer Compare Lower Register -->
            <register>
              <name>TIMER_CMP_L</name>
              <description>Timer Compare Lower Register</description>
              <addressOffset>0x0410</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- cmp_l: Lower 32 bits of 64-bit timer compare register -->
                <field>
                  <name>cmp_l</name>
                  <description>Lower 32 bits of 64-bit timer compare register</description>
                  <bitRange>[31:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- TIMER_CMP_H: Timer Compare Higher Register -->
            <register>
              <name>TIMER_CMP_H</name>
              <description>Timer Compare Higher Register</description>
              <addressOffset>0x0414</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- cmp_h: Higher 32 bits of 64-bit timer compare register -->
                <field>
                  <name>cmp_h</name>
                  <description>Higher 32 bits of 64-bit timer compare register</description>
                  <bitRange>[31:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>


          </registers>
    </peripheral>
    <peripheral>
          <name>gpio0_inst</name>
          <version>1.6.2</version>
          <baseAddress>0x00008000</baseAddress>
          <groupName>gpio</groupName>
          <description></description>

          <addressBlock>
            <offset>0x0</offset>
            <size>0x00000400</size>
            <usage>registers</usage>
          </addressBlock>

          <registers>
                <!-- RD_DATA_REG: Read Data Register -->
            <register>
              <name>RD_DATA_REG</name>
              <description>Read Data Register</description>
              <addressOffset>0x0000</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- rd_data: Read actual values of GPIO's -->
                <field>
                  <name>rd_data</name>
                  <description>Read actual values of GPIO's</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-only</access>
                </field>

              </fields>
           </register>

      <!-- WR_DATA_REG: Write Data Register -->
            <register>
              <name>WR_DATA_REG</name>
              <description>Write Data Register</description>
              <addressOffset>0x0004</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- wr_data: Write GPIO output register -->
                <field>
                  <name>wr_data</name>
                  <description>Write GPIO output register</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- SET_DATA_REG: Set Data Register -->
            <register>
              <name>SET_DATA_REG</name>
              <description>Set Data Register</description>
              <addressOffset>0x0008</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- set_data: Set GPIO output register -->
                <field>
                  <name>set_data</name>
                  <description>Set GPIO output register</description>
                  <bitRange>[7:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- CLEAR_DATA_REG: Clear Data Register -->
            <register>
              <name>CLEAR_DATA_REG</name>
              <description>Clear Data Register</description>
              <addressOffset>0x000C</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- clear_data: Clear GPIO output register -->
                <field>
                  <name>clear_data</name>
                  <description>Clear GPIO output register</description>
                  <bitRange>[7:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- DIRECTION_REG: Direction Register -->
            <register>
              <name>DIRECTION_REG</name>
              <description>Direction Register</description>
              <addressOffset>0x0010</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- direction_reg: GPIO Direction register -->
                <field>
                  <name>direction_reg</name>
                  <description>GPIO Direction register</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_TYPE_REG: Interrupt Type Register -->
            <register>
              <name>INT_TYPE_REG</name>
              <description>Interrupt Type Register</description>
              <addressOffset>0x0014</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- int_type: Interrupt Type Cofiguration Register, 1-Edge, 0-Level -->
                <field>
                  <name>int_type</name>
                  <description>Interrupt Type Cofiguration Register, 1-Edge, 0-Level</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_METHOD_REG: Interrupt Method Register -->
            <register>
              <name>INT_METHOD_REG</name>
              <description>Interrupt Method Register</description>
              <addressOffset>0x0018</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- int_method: Interrupt Method Register, if Interrupt Type is Edge` 1-Rising edge 0-faling edge, if Interrupt Type is Level` 1-High level, 0-Low level -->
                <field>
                  <name>int_method</name>
                  <description>Interrupt Method Register, if Interrupt Type is Edge` 1-Rising edge 0-faling edge, if Interrupt Type is Level` 1-High level, 0-Low level</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_STATUS_REG: Interrupt Status Register -->
            <register>
              <name>INT_STATUS_REG</name>
              <description>Interrupt Status Register</description>
              <addressOffset>0x001C</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- int_status: Interrupt Status Register, indicates interrupt status -->
                <field>
                  <name>int_status</name>
                  <description>Interrupt Status Register, indicates interrupt status</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_ENABLE_REG: Interrupt Enable Register -->
            <register>
              <name>INT_ENABLE_REG</name>
              <description>Interrupt Enable Register</description>
              <addressOffset>0x0020</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- Int_enable: Interrupt Enable Register, enables appropriate channel interrupt -->
                <field>
                  <name>Int_enable</name>
                  <description>Interrupt Enable Register, enables appropriate channel interrupt</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_SET_REG: Interrupt Set Register -->
            <register>
              <name>INT_SET_REG</name>
              <description>Interrupt Set Register</description>
              <addressOffset>0x0024</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- int_set: Interrupt Set Register, user can generate interrupt by writing '1' to the corresponding bit of this register -->
                <field>
                  <name>int_set</name>
                  <description>Interrupt Set Register, user can generate interrupt by writing '1' to the corresponding bit of this register</description>
                  <bitRange>[7:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>


          </registers>
    </peripheral>
    <peripheral>
          <name>i2c0_inst</name>
          <version>2.0.1</version>
          <baseAddress>0x00008400</baseAddress>
          <groupName>i2c_controller</groupName>
          <description></description>

          <addressBlock>
            <offset>0x0</offset>
            <size>0x00000400</size>
            <usage>registers</usage>
          </addressBlock>

          <registers>
                <!-- WR_DATA_REG: Write Data Register -->
            <register>
              <name>WR_DATA_REG</name>
              <description>Write Data Register</description>
              <addressOffset>0x0000</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- tx_fifo: Write access to this field pushes data to Transmit FIFO -->
                <field>
                  <name>tx_fifo</name>
                  <description>Write access to this field pushes data to Transmit FIFO</description>
                  <bitRange>[7:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- RD_DATA_REG: Read Data Register -->
            <register>
              <name>RD_DATA_REG</name>
              <description>Read Data Register</description>
              <addressOffset>0x0000</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- rx_fifo: Read access to this field pops data from Receive FIFO -->
                <field>
                  <name>rx_fifo</name>
                  <description>Read access to this field pops data from Receive FIFO</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-only</access>
                </field>

              </fields>
           </register>

      <!-- TARGET_ADDRL_REG: Lower 7-bit target address -->
            <register>
              <name>TARGET_ADDRL_REG</name>
              <description>Lower 7-bit target address</description>
              <addressOffset>0x0004</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- target_addr_l_reg: Lower 7-bit target address -->
                <field>
                  <name>target_addr_l_reg</name>
                  <description>Lower 7-bit target address</description>
                  <bitRange>[6:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- TARGET_ADDRH_REG: Upper 3-bit target address -->
            <register>
              <name>TARGET_ADDRH_REG</name>
              <description>Upper 3-bit target address</description>
              <addressOffset>0x0008</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- target_addr_h_reg: For 10-bit address mode only. Lower 3-bit target address -->
                <field>
                  <name>target_addr_h_reg</name>
                  <description>For 10-bit address mode only. Lower 3-bit target address</description>
                  <bitRange>[2:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- CONTROL_REG: Control Register -->
            <register>
              <name>CONTROL_REG</name>
              <description>Control Register</description>
              <addressOffset>0x000C</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- start: Starts the I2C transaction. This is asserted after the MPU has finished writing to all configuration registers -->
                <field>
                  <name>start</name>
                  <description>Starts the I2C transaction. This is asserted after the MPU has finished writing to all configuration registers</description>
                  <bitRange>[0:0]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- abort: Stops an I2C transaction currently in progress -->
                <field>
                  <name>abort</name>
                  <description>Stops an I2C transaction currently in progress</description>
                  <bitRange>[1:1]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- reset: Set this bit to 1 to reset this I2C Controller -->
                <field>
                  <name>reset</name>
                  <description>Set this bit to 1 to reset this I2C Controller</description>
                  <bitRange>[2:2]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- repeated_start: Causes I2C controller to omit the generation of a stop condition following the completion of a transaction. Subsequent transaction will be a repeated start. -->
                <field>
                  <name>repeated_start</name>
                  <description>Causes I2C controller to omit the generation of a stop condition following the completion of a transaction. Subsequent transaction will be a repeated start.</description>
                  <bitRange>[3:3]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- TGT_BYTE_CNT_REG: Target Byte Count Register -->
            <register>
              <name>TGT_BYTE_CNT_REG</name>
              <description>Target Byte Count Register</description>
              <addressOffset>0x0010</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- byte_cnt: Number of data bytes for the current transaction -->
                <field>
                  <name>byte_cnt</name>
                  <description>Number of data bytes for the current transaction</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- MODE_REG: Mode Register -->
            <register>
              <name>MODE_REG</name>
              <description>Mode Register</description>
              <addressOffset>0x0014</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- clk_presc_high: The upper three bits of the clock prescaler -->
                <field>
                  <name>clk_presc_high</name>
                  <description>The upper three bits of the clock prescaler</description>
                  <bitRange>[2:0]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- trx_mode: Sets the read or write operation on the I2C bus -->
                <field>
                  <name>trx_mode</name>
                  <description>Sets the read or write operation on the I2C bus</description>
                  <bitRange>[3:3]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- addr_mode: Selects the addressing mode either 7 or 10 bits -->
                <field>
                  <name>addr_mode</name>
                  <description>Selects the addressing mode either 7 or 10 bits</description>
                  <bitRange>[5:5]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- bus_speed_mode: Selects setup time for Repeated START Condition and setup time for STOP Condition -->
                <field>
                  <name>bus_speed_mode</name>
                  <description>Selects setup time for Repeated START Condition and setup time for STOP Condition</description>
                  <bitRange>[7:6]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- CLK_PRESCL_REG: Clock Prescaler Register Low Bits -->
            <register>
              <name>CLK_PRESCL_REG</name>
              <description>Clock Prescaler Register Low Bits</description>
              <addressOffset>0x0018</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- clk_presc_low: Lower 8-bit value of divisor in clock prescaler register -->
                <field>
                  <name>clk_presc_low</name>
                  <description>Lower 8-bit value of divisor in clock prescaler register</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_STATUS1_REG: Interrupt Status 1st Register -->
            <register>
              <name>INT_STATUS1_REG</name>
              <description>Interrupt Status 1st Register</description>
              <addressOffset>0x001C</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- rx_fifo_ready_int: This interrupt status bit asserts when Receive FIFO is empty and receives a data word from SPI interface. -->
                <field>
                  <name>rx_fifo_ready_int</name>
                  <description>This interrupt status bit asserts when Receive FIFO is empty and receives a data word from SPI interface.</description>
                  <bitRange>[0:0]</bitRange>
                  <access></access>
                </field>
            <!-- rx_fifo_afull_int: This interrupt status bit asserts when the amount of data words in Receive FIFO changes from 'RX FIFO Almost Full Flag' - 1 to 'RX FIFO Almost Full Flag'. -->
                <field>
                  <name>rx_fifo_afull_int</name>
                  <description>This interrupt status bit asserts when the amount of data words in Receive FIFO changes from 'RX FIFO Almost Full Flag' - 1 to 'RX FIFO Almost Full Flag'.</description>
                  <bitRange>[1:1]</bitRange>
                  <access></access>
                </field>
            <!-- rx_fifo_full_int: This interrupt status bit asserts when RX FIFO full status changes from not full to full state. -->
                <field>
                  <name>rx_fifo_full_int</name>
                  <description>This interrupt status bit asserts when RX FIFO full status changes from not full to full state.</description>
                  <bitRange>[2:2]</bitRange>
                  <access></access>
                </field>
            <!-- tx_fifo_empty_int: This interrupt status bit asserts when the last data in Transmit FIFO is popped-out, causing the FIFO to become empty. -->
                <field>
                  <name>tx_fifo_empty_int</name>
                  <description>This interrupt status bit asserts when the last data in Transmit FIFO is popped-out, causing the FIFO to become empty.</description>
                  <bitRange>[3:3]</bitRange>
                  <access></access>
                </field>
            <!-- tx_fifo_aempty_int: This interrupt status bit asserts when the amount of data words in Transmit FIFO changes from 'TX FIFO Almost Empty Flag' + 1 to 'TX FIFO Almost Empty Flag'. -->
                <field>
                  <name>tx_fifo_aempty_int</name>
                  <description>This interrupt status bit asserts when the amount of data words in Transmit FIFO changes from 'TX FIFO Almost Empty Flag' + 1 to 'TX FIFO Almost Empty Flag'.</description>
                  <bitRange>[4:4]</bitRange>
                  <access></access>
                </field>
            <!-- tx_fifo_full_int: This interrupt status bit asserts when Transmit FIFO changes from not full state to full state. -->
                <field>
                  <name>tx_fifo_full_int</name>
                  <description>This interrupt status bit asserts when Transmit FIFO changes from not full state to full state.</description>
                  <bitRange>[5:5]</bitRange>
                  <access></access>
                </field>
            <!-- tr_cmp_int: This interrupt status bit asserts when the number of transmitted words via SPI interface reaches the TGT_WORD_CNT_REG.target_word_cnt setting value. -->
                <field>
                  <name>tr_cmp_int</name>
                  <description>This interrupt status bit asserts when the number of transmitted words via SPI interface reaches the TGT_WORD_CNT_REG.target_word_cnt setting value.</description>
                  <bitRange>[7:7]</bitRange>
                  <access></access>
                </field>

              </fields>
           </register>

      <!-- INT_ENABLE1_REG: Interrupt Enable 1st Register -->
            <register>
              <name>INT_ENABLE1_REG</name>
              <description>Interrupt Enable 1st Register</description>
              <addressOffset>0x0020</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- rx_fifo_ready_en: Interrupt enabled bit corresponded to Receive FIFO Ready Interrupt Status. -->
                <field>
                  <name>rx_fifo_ready_en</name>
                  <description>Interrupt enabled bit corresponded to Receive FIFO Ready Interrupt Status.</description>
                  <bitRange>[0:0]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- rx_fifo_afull_en: Interrupt enabled bit corresponded to Receive FIFO Almost Full Interrupt Status. -->
                <field>
                  <name>rx_fifo_afull_en</name>
                  <description>Interrupt enabled bit corresponded to Receive FIFO Almost Full Interrupt Status.</description>
                  <bitRange>[1:1]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- rx_fifo_full_en: Interrupt enabled bit corresponded to Receive FIFO Full Interrupt Status. -->
                <field>
                  <name>rx_fifo_full_en</name>
                  <description>Interrupt enabled bit corresponded to Receive FIFO Full Interrupt Status.</description>
                  <bitRange>[2:2]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- tx_fifo_empty_en: Interrupt enabled bit corresponded to Transmit FIFO Empty Interrupt Status. -->
                <field>
                  <name>tx_fifo_empty_en</name>
                  <description>Interrupt enabled bit corresponded to Transmit FIFO Empty Interrupt Status.</description>
                  <bitRange>[3:3]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- tx_fifo_aempty_en: Interrupt enabled bit corresponded to Transmit FIFO Almost Empty Interrupt Status. -->
                <field>
                  <name>tx_fifo_aempty_en</name>
                  <description>Interrupt enabled bit corresponded to Transmit FIFO Almost Empty Interrupt Status.</description>
                  <bitRange>[4:4]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- tx_fifo_full_en: Interrupt enabled bit corresponded to Transmit FIFO Full Interrupt Status. -->
                <field>
                  <name>tx_fifo_full_en</name>
                  <description>Interrupt enabled bit corresponded to Transmit FIFO Full Interrupt Status.</description>
                  <bitRange>[5:5]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- tr_cmp_en: Interrupt enabled bit corresponded to Transfer Complete Interrupt Status. -->
                <field>
                  <name>tr_cmp_en</name>
                  <description>Interrupt enabled bit corresponded to Transfer Complete Interrupt Status.</description>
                  <bitRange>[7:7]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_SET1_REG: Interrupt Set 1st Register -->
            <register>
              <name>INT_SET1_REG</name>
              <description>Interrupt Set 1st Register</description>
              <addressOffset>0x0024</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- rx_fifo_ready_set: Interrupt set bit corresponded to Receive FIFO Ready Interrupt Status. -->
                <field>
                  <name>rx_fifo_ready_set</name>
                  <description>Interrupt set bit corresponded to Receive FIFO Ready Interrupt Status.</description>
                  <bitRange>[0:0]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- rx_fifo_afull_set: Interrupt set bit corresponded to Receive FIFO Almost Full Interrupt Status. -->
                <field>
                  <name>rx_fifo_afull_set</name>
                  <description>Interrupt set bit corresponded to Receive FIFO Almost Full Interrupt Status.</description>
                  <bitRange>[1:1]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- rx_fifo_full_set: Interrupt set bit corresponded to Receive FIFO Full Interrupt Status. -->
                <field>
                  <name>rx_fifo_full_set</name>
                  <description>Interrupt set bit corresponded to Receive FIFO Full Interrupt Status.</description>
                  <bitRange>[2:2]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- tx_fifo_empty_set: Interrupt set bit corresponded to Transmit FIFO Empty Interrupt Status. -->
                <field>
                  <name>tx_fifo_empty_set</name>
                  <description>Interrupt set bit corresponded to Transmit FIFO Empty Interrupt Status.</description>
                  <bitRange>[3:3]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- tx_fifo_aempty_set: Interrupt set bit corresponded to Transmit FIFO Almost Empty Interrupt Status. -->
                <field>
                  <name>tx_fifo_aempty_set</name>
                  <description>Interrupt set bit corresponded to Transmit FIFO Almost Empty Interrupt Status.</description>
                  <bitRange>[4:4]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- tx_fifo_full_set: Interrupt set bit corresponded to Transmit FIFO Full Interrupt Status. -->
                <field>
                  <name>tx_fifo_full_set</name>
                  <description>Interrupt set bit corresponded to Transmit FIFO Full Interrupt Status.</description>
                  <bitRange>[5:5]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- tr_cmp_set: Interrupt set bit corresponded to Transfer Complete Interrupt Status. -->
                <field>
                  <name>tr_cmp_set</name>
                  <description>Interrupt set bit corresponded to Transfer Complete Interrupt Status.</description>
                  <bitRange>[7:7]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- INT_STATUS2_REG: Interrupt Status 2nd Register -->
            <register>
              <name>INT_STATUS2_REG</name>
              <description>Interrupt Status 2nd Register</description>
              <addressOffset>0x0028</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- timeout_int: This interrupt status of bit asserts when scl_io is hold for SCL_TIMEOUT_REG.timeout_val times the programmed SCL low period. -->
                <field>
                  <name>timeout_int</name>
                  <description>This interrupt status of bit asserts when scl_io is hold for SCL_TIMEOUT_REG.timeout_val times the programmed SCL low period.</description>
                  <bitRange>[0:0]</bitRange>
                  <access></access>
                </field>
            <!-- arb_lost_int: This interrupt status bit asserts when I2C Controller IP Core loses arbitration. -->
                <field>
                  <name>arb_lost_int</name>
                  <description>This interrupt status bit asserts when I2C Controller IP Core loses arbitration.</description>
                  <bitRange>[1:1]</bitRange>
                  <access></access>
                </field>
            <!-- abort_ack_int: This interrupt status bit asserts when an I2C Controller IP Core aborts an ongoing transaction because the host writes 1'b1 to CONTROL_REG.abort. -->
                <field>
                  <name>abort_ack_int</name>
                  <description>This interrupt status bit asserts when an I2C Controller IP Core aborts an ongoing transaction because the host writes 1'b1 to CONTROL_REG.abort.</description>
                  <bitRange>[2:2]</bitRange>
                  <access></access>
                </field>
            <!-- nack_error_int: This interrupt status bit asserts when NACK is received when expecting an ACK during data phase and address phase. -->
                <field>
                  <name>nack_error_int</name>
                  <description>This interrupt status bit asserts when NACK is received when expecting an ACK during data phase and address phase.</description>
                  <bitRange>[3:3]</bitRange>
                  <access></access>
                </field>

              </fields>
           </register>

      <!-- INT_ENABLE2_REG: Interrupt Enable 2nd Register -->
            <register>
              <name>INT_ENABLE2_REG</name>
              <description>Interrupt Enable 2nd Register</description>
              <addressOffset>0x002C</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- timeout_en: Defines the Interrupt enable of bit corresponding to SCL Timeout Interrupt. -->
                <field>
                  <name>timeout_en</name>
                  <description>Defines the Interrupt enable of bit corresponding to SCL Timeout Interrupt.</description>
                  <bitRange>[0:0]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- arb_lost_en: Defines the interrupt enable bit corresponding to Arbitration Lost Interrupt. -->
                <field>
                  <name>arb_lost_en</name>
                  <description>Defines the interrupt enable bit corresponding to Arbitration Lost Interrupt.</description>
                  <bitRange>[1:1]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- abort_ack_en: Defines the interrupt enable bit corresponding to Transaction Abort Acknowledgement Interrupt. -->
                <field>
                  <name>abort_ack_en</name>
                  <description>Defines the interrupt enable bit corresponding to Transaction Abort Acknowledgement Interrupt.</description>
                  <bitRange>[2:2]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- nack_error_en: Defines the interrupt enable bit corresponding to NACK Error Interrupt. -->
                <field>
                  <name>nack_error_en</name>
                  <description>Defines the interrupt enable bit corresponding to NACK Error Interrupt.</description>
                  <bitRange>[3:3]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- INT_SET2_REG: Interrupt Set 2nd Register -->
            <register>
              <name>INT_SET2_REG</name>
              <description>Interrupt Set 2nd Register</description>
              <addressOffset>0x0030</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- timeout_set: Defines the Interrupt set of bit corresponding to SCL Timeout Interrupt. -->
                <field>
                  <name>timeout_set</name>
                  <description>Defines the Interrupt set of bit corresponding to SCL Timeout Interrupt.</description>
                  <bitRange>[0:0]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- arb_lost_set: Defines the interrupt set bit corresponding to Arbitration Lost Interrupt. -->
                <field>
                  <name>arb_lost_set</name>
                  <description>Defines the interrupt set bit corresponding to Arbitration Lost Interrupt.</description>
                  <bitRange>[1:1]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- abort_ack_set: Defines the interrupt set bit corresponding to Transaction Abort Acknowledgement Interrupt. -->
                <field>
                  <name>abort_ack_set</name>
                  <description>Defines the interrupt set bit corresponding to Transaction Abort Acknowledgement Interrupt.</description>
                  <bitRange>[2:2]</bitRange>
                  <access>write-only</access>
                </field>
            <!-- nack_error_set: Defines the interrupt set bit corresponding to NACK Error Interrupt. -->
                <field>
                  <name>nack_error_set</name>
                  <description>Defines the interrupt set bit corresponding to NACK Error Interrupt.</description>
                  <bitRange>[3:3]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- FIFO_STATUS_REG: FIFO Status Register -->
            <register>
              <name>FIFO_STATUS_REG</name>
              <description>FIFO Status Register</description>
              <addressOffset>0x0034</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- rx_fifo_empty: This bit reflects the empty condition of Receive FIFO. -->
                <field>
                  <name>rx_fifo_empty</name>
                  <description>This bit reflects the empty condition of Receive FIFO.</description>
                  <bitRange>[0:0]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- rx_fifo_afull: This bit reflects the almost full condition of Receive FIFO. -->
                <field>
                  <name>rx_fifo_afull</name>
                  <description>This bit reflects the almost full condition of Receive FIFO.</description>
                  <bitRange>[1:1]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- rx_fifo_full: This bit reflects the full condition of Receive FIFO. -->
                <field>
                  <name>rx_fifo_full</name>
                  <description>This bit reflects the full condition of Receive FIFO.</description>
                  <bitRange>[2:2]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- tx_fifo_empty: This bit reflects the empty condition of Transmit FIFO. -->
                <field>
                  <name>tx_fifo_empty</name>
                  <description>This bit reflects the empty condition of Transmit FIFO.</description>
                  <bitRange>[3:3]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- tx_fifo_aempty: This bit reflects the almost empty condition of Transmit FIFO. -->
                <field>
                  <name>tx_fifo_aempty</name>
                  <description>This bit reflects the almost empty condition of Transmit FIFO.</description>
                  <bitRange>[4:4]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- tx_fifo_full: This bit reflects the full condition of Transmit FIFO. -->
                <field>
                  <name>tx_fifo_full</name>
                  <description>This bit reflects the full condition of Transmit FIFO.</description>
                  <bitRange>[5:5]</bitRange>
                  <access>read-only</access>
                </field>

              </fields>
           </register>

      <!-- SCL_TIMEOUT_REG: SLC Timeout Register specifies the timeout value for SCL Timeout. -->
            <register>
              <name>SCL_TIMEOUT_REG</name>
              <description>SLC Timeout Register specifies the timeout value for SCL Timeout.</description>
              <addressOffset>0x0038</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- timeout_val: Specifies the timeout value for SCL timeout -->
                <field>
                  <name>timeout_val</name>
                  <description>Specifies the timeout value for SCL timeout</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>


          </registers>
    </peripheral>
    <peripheral>
          <name>sysmem0_inst</name>
          <version>2.1.0</version>
          <baseAddress>0x00000000</baseAddress>
          <groupName>system_memory</groupName>
          <description></description>

          <addressBlock>
            <offset>0x0</offset>
            <size>0x00008000</size>
            <usage>registers</usage>
          </addressBlock>

          <registers>
          
          </registers>
    </peripheral>
    <peripheral>
          <name>uart0_inst</name>
          <version>1.3.0</version>
          <baseAddress>0x00008800</baseAddress>
          <groupName>uart</groupName>
          <description></description>

          <addressBlock>
            <offset>0x0</offset>
            <size>0x00000400</size>
            <usage>registers</usage>
          </addressBlock>

          <registers>
                <!-- THR: Transmitter Holding Register is the interface to the Transmitter Buffer/FIFO (XMIT FIFO). -->
            <register>
              <name>THR</name>
              <description>Transmitter Holding Register is the interface to the Transmitter Buffer/FIFO (XMIT FIFO).</description>
              <addressOffset>0x0000</addressOffset>
              <size>32</size>
              <access>write-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- XMIT_FIFO: Write access to this field pushes data to XMIT FIFO -->
                <field>
                  <name>XMIT_FIFO</name>
                  <description>Write access to this field pushes data to XMIT FIFO</description>
                  <bitRange>[7:0]</bitRange>
                  <access>write-only</access>
                </field>

              </fields>
           </register>

      <!-- RBR: Receive Buffer Register is the interface to the Receiver Buffer/FIFO (RCVR FIFO). -->
            <register>
              <name>RBR</name>
              <description>Receive Buffer Register is the interface to the Receiver Buffer/FIFO (RCVR FIFO).</description>
              <addressOffset>0x0000</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- RCVR_FIFO: Read access to this field pops data from RCVR FIFO -->
                <field>
                  <name>RCVR_FIFO</name>
                  <description>Read access to this field pops data from RCVR FIFO</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-only</access>
                </field>

              </fields>
           </register>

      <!-- IER: Interrupt Enable Register enables the four types of UART interrupts. -->
            <register>
              <name>IER</name>
              <description>Interrupt Enable Register enables the four types of UART interrupts.</description>
              <addressOffset>0x0004</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- rda_int_en: Received Data Available Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled. -->
                <field>
                  <name>rda_int_en</name>
                  <description>Received Data Available Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled.</description>
                  <bitRange>[0:0]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- thre_int_en: Transmitter Holding Register Empty Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled. -->
                <field>
                  <name>thre_int_en</name>
                  <description>Transmitter Holding Register Empty Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled.</description>
                  <bitRange>[1:1]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- rls_int_en: Receiver Line Status Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled. -->
                <field>
                  <name>rls_int_en</name>
                  <description>Receiver Line Status Interrupt Enable. 0-> Interrupt is disabled. 1-> Interrupt is enabled.</description>
                  <bitRange>[2:2]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- IIR: Interrupt Identification Register determines the asserted interrupt based on priority. -->
            <register>
              <name>IIR</name>
              <description>Interrupt Identification Register determines the asserted interrupt based on priority.</description>
              <addressOffset>0x0008</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- int_pending: 0 -> Interrupt is pending according to int_prio and timeout_int. 1 -> No pending interrupt. -->
                <field>
                  <name>int_pending</name>
                  <description>0 -> Interrupt is pending according to int_prio and timeout_int. 1 -> No pending interrupt.</description>
                  <bitRange>[0:0]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- int_prio: 2'b11 -> Receiver Line Status Interrupt. 2'b10 -> Received Data Available Interrupt. 2'b01 -> Transmitter Holding Register Empty Interrupt. 2'b00 -> MODEM Status Interrupt. -->
                <field>
                  <name>int_prio</name>
                  <description>2'b11 -> Receiver Line Status Interrupt. 2'b10 -> Received Data Available Interrupt. 2'b01 -> Transmitter Holding Register Empty Interrupt. 2'b00 -> MODEM Status Interrupt.</description>
                  <bitRange>[2:1]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- fifos_en: FIFO mode - Fixed to logic 2'b11. Non-FIFO mode - fixed to 2'b00. -->
                <field>
                  <name>fifos_en</name>
                  <description>FIFO mode - Fixed to logic 2'b11. Non-FIFO mode - fixed to 2'b00.</description>
                  <bitRange>[7:6]</bitRange>
                  <access>read-only</access>
                </field>

              </fields>
           </register>

      <!-- LCR: Line Control Register configures character length, number stop bits and parity bit. -->
            <register>
              <name>LCR</name>
              <description>Line Control Register configures character length, number stop bits and parity bit.</description>
              <addressOffset>0x000C</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- char_len_sel:  2'b00 -> 5 bits. 2'b01 -> 6 bits. 2'b10 -> 7 bits. 2'b11 -> 8 bits. -->
                <field>
                  <name>char_len_sel</name>
                  <description> 2'b00 -> 5 bits. 2'b01 -> 6 bits. 2'b10 -> 7 bits. 2'b11 -> 8 bits.</description>
                  <bitRange>[1:0]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- stop_bit_ctrl: 0 -> One stop bit is generated in the transmitted data. 1 -> Two stop bits are generated. -->
                <field>
                  <name>stop_bit_ctrl</name>
                  <description>0 -> One stop bit is generated in the transmitted data. 1 -> Two stop bits are generated.</description>
                  <bitRange>[2:2]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- parity_en: Parity Enable. 0-> Parity generation and checking is disabled. 1-> Parity generation and checking is enabled. -->
                <field>
                  <name>parity_en</name>
                  <description>Parity Enable. 0-> Parity generation and checking is disabled. 1-> Parity generation and checking is enabled.</description>
                  <bitRange>[3:3]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- even_parity_sel: Even Parity Select. 0 -> Odd parity. 1 -> Even Parity. -->
                <field>
                  <name>even_parity_sel</name>
                  <description>Even Parity Select. 0 -> Odd parity. 1 -> Even Parity.</description>
                  <bitRange>[4:4]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- stick_parity_en: Stick Parity Enable. 0 -> Stick parity is disabled. 1 -> Stick parity is enabled. -->
                <field>
                  <name>stick_parity_en</name>
                  <description>Stick Parity Enable. 0 -> Stick parity is disabled. 1 -> Stick parity is enabled.</description>
                  <bitRange>[5:5]</bitRange>
                  <access>read-write</access>
                </field>
            <!-- break_ctrl_en: Break Control Enable. 0 -> Break control is disabled. 1 -> Break control is enabled. -->
                <field>
                  <name>break_ctrl_en</name>
                  <description>Break Control Enable. 0 -> Break control is disabled. 1 -> Break control is enabled.</description>
                  <bitRange>[6:6]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- LSR: Line Status Register -->
            <register>
              <name>LSR</name>
              <description>Line Status Register</description>
              <addressOffset>0x0014</addressOffset>
              <size>32</size>
              <access>read-only</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- data_rdy: Data Ready Indicator asserts when RCVR FIFO has data. -->
                <field>
                  <name>data_rdy</name>
                  <description>Data Ready Indicator asserts when RCVR FIFO has data.</description>
                  <bitRange>[0:0]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- overrun_err: Overrun Error Indicator asserts when RCVR FIFO is full and the next character has been fully received. -->
                <field>
                  <name>overrun_err</name>
                  <description>Overrun Error Indicator asserts when RCVR FIFO is full and the next character has been fully received.</description>
                  <bitRange>[1:1]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- parity_err: Parity Error Indicator asserts when parity error occurs. -->
                <field>
                  <name>parity_err</name>
                  <description>Parity Error Indicator asserts when parity error occurs.</description>
                  <bitRange>[2:2]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- framing_err: Framing Error Indicator asserts when received data does not have a valid stop bit. -->
                <field>
                  <name>framing_err</name>
                  <description>Framing Error Indicator asserts when received data does not have a valid stop bit.</description>
                  <bitRange>[3:3]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- break_cond: Break condition indicator asserts when rxd_i is held low for longer than full RX time. -->
                <field>
                  <name>break_cond</name>
                  <description>Break condition indicator asserts when rxd_i is held low for longer than full RX time.</description>
                  <bitRange>[4:4]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- thr_empty: THR Empty bit asserts when XMIT FIFO is empty. -->
                <field>
                  <name>thr_empty</name>
                  <description>THR Empty bit asserts when XMIT FIFO is empty.</description>
                  <bitRange>[5:5]</bitRange>
                  <access>read-only</access>
                </field>
            <!-- xmitr_empty: Transmitter Empty bit asserts when both XMIT FIFO and Transmitter Shift Register are empty. -->
                <field>
                  <name>xmitr_empty</name>
                  <description>Transmitter Empty bit asserts when both XMIT FIFO and Transmitter Shift Register are empty.</description>
                  <bitRange>[6:6]</bitRange>
                  <access>read-only</access>
                </field>

              </fields>
           </register>

      <!-- DLAB_LSB: Divisor Latch Register LSB -->
            <register>
              <name>DLAB_LSB</name>
              <description>Divisor Latch Register LSB</description>
              <addressOffset>0x0020</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- divisor_lsb: The lower byte of the Divisor Latch Register. -->
                <field>
                  <name>divisor_lsb</name>
                  <description>The lower byte of the Divisor Latch Register.</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>

      <!-- DLAB_MSB: Divisor Latch Register MSB -->
            <register>
              <name>DLAB_MSB</name>
              <description>Divisor Latch Register MSB</description>
              <addressOffset>0x0024</addressOffset>
              <size>32</size>
              <access>read-write</access>
              <resetValue>0x00000000</resetValue>
              <resetMask>0xFFFFFFFF</resetMask>

              <fields>
                          <!-- divisor_msb: The upper byte of the Divisor Latch Register. -->
                <field>
                  <name>divisor_msb</name>
                  <description>The upper byte of the Divisor Latch Register.</description>
                  <bitRange>[7:0]</bitRange>
                  <access>read-write</access>
                </field>

              </fields>
           </register>


          </registers>
    </peripheral>

      </peripherals>
    </device>
